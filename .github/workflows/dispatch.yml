name: Check, Update, and Upload Tailscale Binaries

on:
  #schedule:
  #  - cron: "0 * * * *"  # This will run every hour. Adjust the schedule as needed.
  workflow_dispatch: # Allows manual triggering of the workflow.

jobs:
  check_and_update:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Get latest Tailscale version
      run: |
        latest_version=$(wget -O- https://pkgs.tailscale.com/stable/ | grep tailscale_ | head -1 | cut -d'_' -f 2)
        echo "Latest Tailscale version: $latest_version"
        echo "LATEST_VERSION=$latest_version" >> $GITHUB_ENV

    - name: Get current version from repo
      run: |
        current_version=$(cat version_tailscale)
        echo "Current version in repo: $current_version"
        echo "CURRENT_VERSION=$current_version" >> $GITHUB_ENV

    - name: Check if update is needed
      id: version_check
      run: |
        if [ "$LATEST_VERSION" != "$CURRENT_VERSION" ]; then
          echo "update_needed=true" >> $GITHUB_ENV
        else
          echo "update_needed=false" >> $GITHUB_ENV
        fi

    - name: Update version in repo
      if: env.update_needed == 'true'
      run: |
        echo "$LATEST_VERSION" > version_tailscale
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git add version_tailscale
        git commit -m "Update Tailscale version to $LATEST_VERSION"
        git push

    - name: Download Tailscale tgz
      if: env.update_needed == 'true'
      run: |
        wget https://pkgs.tailscale.com/stable/tailscale_${{ env.LATEST_VERSION }}_amd64.tgz -O tailscale.tgz

    - name: Extract Tailscale tgz
      if: env.update_needed == 'true'
      run: |
        mkdir tailscale_extract
        tar -xzf tailscale.tgz -C tailscale_extract

    - name: Delete existing files (if any)
      if: env.update_needed == 'true'
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

        # Remove old files if they exist
        rm -f tailscale tailscaled

        # Commit the deletion of old files
        git add tailscale tailscaled || true
        git commit -m "Remove old Tailscale binaries for version ${{ env.LATEST_VERSION }}" || true

    - name: Upload new Tailscale binaries to GitHub repository
      if: env.update_needed == 'true'
      run: |
        # Move the specific files to the repository
        mv tailscale_extract/tailscale_${{ env.LATEST_VERSION }}_amd64/tailscale .
        mv tailscale_extract/tailscale_${{ env.LATEST_VERSION }}_amd64/tailscaled .

        # Add and commit the new files
        git add tailscale tailscaled
        git commit -m "Add new Tailscale binaries for version ${{ env.LATEST_VERSION }}"

        # Push changes to the repository
        git push
